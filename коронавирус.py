# -*- coding: utf-8 -*-
"""Коронавирус.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xOyK5rmgkaGe_gWUOQilW528vJh-LsWe

# ***Ссылка на гугл-диск со всеми данными***

https://drive.google.com/drive/folders/1vMPgOLztvcLhhacNDEBunOn-LUA3qezi?usp=sharing

# ***Ссылка на csv таблицу только новыми случаями - new_cases***

https://drive.google.com/file/d/1mJWNn8ZZQfxrrZjI_edtFS-ed1RofVl7/view?usp=sharing

# ***Ссылка на основную таблицу со всеми данными - owid-covid-data***

https://drive.google.com/file/d/1aU2NrgFPSxII5bYTvZOS8M8fxgzVK8XU/view?usp=sharing

# **Импорт данных**
"""

import pandas as pd
df = pd.read_csv('/content/owid-covid-data.csv')

from google.colab import drive
drive.mount('/content/drive')

df

df.columns

"""# **Немного исследуем данные**"""

df[df['location'].isin(['Russia', 'United States', 'China', 'United Kingdom', 'India', 'Spain', 'Germany','Chile', 'Algeria', 'Australia', 'Vietnam', 'Canada'])]

df['location'].unique()

df.isna().mean()

df.isna().mean().sort_values(ascending=False)

cols_to_delete = df.columns[df.isna().mean() > 0.8]

cols_to_delete

cols_to_delete = df.columns[df.isna().mean() > 0.8]
df = df.drop(cols_to_delete, axis = 1) #убрали столбцы с большим количеством NaN

df

import matplotlib.pyplot as plt

plt.style.use('dark_background')

df['continent'].hist()

df.describe()

"""**Корреляция по всем значениям**"""

import numpy as np
import matplotlib.pylab as plt
import statsmodels.api as sm
import seaborn as sns



plt.rcParams['figure.figsize'] = [15, 15]
df.hist()

df[df['location'] == 'Russia']

df[df['date'] > '2021-01-01']

"""# **Отбор 2020-2022 по России**"""

df_Russia2020 = df.loc[(df['location'] == 'Russia') & (df['date'] >= '2020-01-01') & (df['date'] < '2021-01-01')] #Данные о России за 2020 год

df_Russia2020

df_Russia2020[['new_cases', 'stringency_index']].corr()

df_Russia2021 = df.loc[(df['location'] == 'Russia') & (df['date'] >= '2021-01-01') & (df['date'] < '2022-01-01')] #Данные о России за 2021 год

df_Russia2022 = df.loc[(df['location'] == 'Russia') & (df['date'] >= '2022-01-01') & (df['date'] < '2023-01-01')] #Данные о России за 2022 год

df_Russia2021[['new_cases', 'stringency_index']].corr()

df_Russia2022[['new_cases', 'stringency_index']].corr()

df_Russia2020[['new_deaths', 'stringency_index']].corr()

df_Russia2021[['new_deaths', 'stringency_index']].corr()

df_Russia2022[['new_deaths', 'stringency_index']].corr()

df_Russia2020[['new_tests', 'stringency_index', 'date']]

df_Russia2020[['new_deaths', 'new_tests']].corr()

df_Russia2021[['new_deaths', 'new_tests']].corr()

df_Russia2022[['new_deaths', 'new_tests']].corr()

df_Russia2022[['new_deaths', 'new_tests', 'date']]

df_Russia2021[['new_deaths', 'new_tests']].corr()

"""# **Тепловая карта**"""

df.corr()

sns.heatmap(df_Russia2020.corr(), 
            xticklabels=df_Russia2021.corr().columns,
            yticklabels=df_Russia2021.corr().columns)

"""# **Скаттер графики по годам**"""

df_Russia2021[['new_deaths', 'new_tests']].plot.scatter(
    x = 'new_tests',
    y = 'new_deaths',
    c = 'White'
)

df_Russia2020[['new_deaths', 'new_tests']].plot.scatter(
    x = 'new_tests',
    y = 'new_deaths',
    c = 'White'
)

df_Russia2022[['new_deaths', 'new_tests']].plot.scatter(
    x = 'new_tests',
    y = 'new_deaths',
    c = 'White'
)

df_Russia2022[['new_deaths', 'new_tests']]

df_Russia2021[['new_deaths', 'new_tests']]

lm = sm.OLS.from_formula('people_vaccinated ~ new_cases', df_Russia2021)
result = lm.fit()
result.summary()

plt.rcParams['figure.figsize'] = [10, 10]
df_Russia2020[['total_deaths', 'total_tests']].plot.scatter(
    x = 'total_deaths',
    y = 'total_tests',
    c = 'White'
)

lm = sm.OLS.from_formula('new_tests ~ new_deaths', df_Russia2020)
result = lm.fit()
result.summary()

x = df_Russia2021.drop(columns='new_tests')
x

"""# **Данные по некоторым странам**"""

df_Russia = df.loc[(df['location'] == 'Russia') & (df['date'] >= '2022-01-01') & (df['date'] < '2022-09-01')] #Данные о России за 2022

df_China  = df.loc[(df['location'] == 'China') & (df['date'] >= '2022-01-01') & (df['date'] < '2022-09-01')] #Данные о Китае за 2022

df_Australia = df.loc[(df['location'] == 'Australia') & (df['date'] >= '2022-01-01') & (df['date'] < '2022-09-01')] #Данные об Австралии за 2022

df_Germany = df.loc[(df['location'] == 'Germany') & (df['date'] >= '2022-01-01') & (df['date'] < '2022-09-01')] #Данные о Германии за 2022

from pandas.core.internals.managers import T

def plot_country(data, country):
  plt.figure(figsize=(30,10))

  plt.plot(data['date'], data['new_cases'],
  color = '#33cccc', 
  label = 'Total cases',
  marker = 'o')

  plt.title('New cases over the time in ' + country, size=30)
  plt.ylabel('Cases', size=20)
  plt.xlabel('Timeline', size=20)
  plt.xticks(rotation=90, size=10)
  plt.yticks(size=15)

plot_country(df_Australia, 'Australia')

plot_country(df_Germany, 'Germany')

plot_country(df_Russia, 'Russia')

plot_country(df_China, 'China')

"""# **Предсказатель данных**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn import linear_model

df = pd.read_csv('/content/new_cases.csv')
df = df.drop(df[df.date >= '2021-01-01'].index)
df = df.drop(df[df.date < '2020-01-01'].index)
df

df['index'] = np.arange(1, len(df) + 1)

df[['index', 'World']]

index_x = np.array(df['index']).reshape(-1, 1)

cases_y = np.array(df['World']).reshape(-1, 1)

plt.style.use('dark_background')
plt.plot(cases_y, 'wo')

poly = PolynomialFeatures(degree=3)
index_x = poly.fit_transform(index_x)
index_x

model = linear_model.LinearRegression()
model.fit(index_x,cases_y)
accuracy = model.score(index_x,cases_y)
round(accuracy*100,3)

prediction = model.predict(index_x)

prediction = model.predict(index_x)
plt.style.use('dark_background')
plt.plot(cases_y, 'wo')
plt.plot(prediction, '--b')

prediction = model.predict(index_x)
plt.style.use('dark_background')
plt.plot(cases_y, 'wo')
plt.plot(prediction, '--b')
days = 10
print('Will be', round(int(model.predict(poly.fit_transform([[345+days]])))), 
      'new cases over the', days, 'days')

x_prediction = np.array(list(range(1,345+days))).reshape(-1,1)
y_prediction = model.predict(poly.fit_transform(x_prediction))
plt.plot(y_prediction,'ro')
plt.plot(prediction, '--b')
plt.show()